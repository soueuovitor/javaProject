/*
 * Copyright (C) 2017 vhoa1
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either     version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package Interface;


import gamefestival.ColaboradorPago;
import gamefestival.GameDesigner;
import gamefestival.GameFestival;
import static java.awt.Color.WHITE;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.NumberFormatter;
import javax.swing.text.StyledDocument;

/**
 *
 * @author vhoa1
 */
public class GameDesigners extends javax.swing.JFrame {
    private GameFestival game;
    private GameDesigner gameDesigner;
    private ImprimeGameDesigners listagem;
    static final int MAX_INT = 9;
    private ArrayList<JCheckBox> boxes;
    private ArrayList<GameDesigner> designers;
    
    /**
     * Creates new form ColaboradorPago
     */
 
    public GameDesigners(GameFestival game,GameDesigner gameDesigner, ImprimeGameDesigners listagem) {
        initComponents();
        setICon();
        this.game = game;
        this.gameDesigner = gameDesigner;
        this.listagem = listagem;
        boxes = new ArrayList<>();
        designers = new ArrayList<>();
        getCheck();
        printDays();
         getContentPane().setBackground(WHITE);
        
        
         if (registoNovo()) {    
            //Altera o titulo da janela
            //Como construimos sempre uma nova janela, as caixas de texto já estão limpas
            setTitle("Criação de novo Game Designer");
            nomeCP.requestFocus();                      
        }else{
            //No caso de um registo existente
            //Altera o titulo da janela
            setTitle("Alteração de dados do GameDesigner");
            //Preenche as caixas de texto com os dados do utilizador
            nomeCP.setText(gameDesigner.getNome());
            moradaCP.setText(gameDesigner.getMorada());            
            jogoGD.setText(gameDesigner.getJogo());
            numTelCP.setText(gameDesigner.getNumTel());
            cacheGD.setText(Float.toString(gameDesigner.getCache()));
            nifCP.setText(Long.toString((gameDesigner).getNif()));
            //HoraGD.setText(gameDesigner.getHora()));
         
        }
    }
    public void getCheck(){
    
        int a = 0;
        int b = game.getListaDias().size();
        
        for (a = 0; a < b; a++){
         
            JCheckBox ga  = new javax.swing.JCheckBox() ;
            ga.setName(game.getListaDias().getDia(a).dataFormatada());
            ga.setText(game.getListaDias().getDia(a).CompararData());
            boxes.add(ga);
            
        }

    }
    public void printDays(){                   //imprime os dias
        
        for (JCheckBox a : boxes)
        {
        panel.add(a);
       
        panel.repaint();
        panel.revalidate();
    
        }
         pack();
    }
  
    private boolean registoNovo() {
        //Se utililizador == null consideramos que é um novo registo
        return gameDesigner == null;
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel9 = new javax.swing.JLabel();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nomeCP = new javax.swing.JTextField();
        moradaCP = new javax.swing.JTextField();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        cacheGD = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jogoGD = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        numTelCP = new javax.swing.JTextField();
        panel = new javax.swing.JPanel();
        nifCP = new javax.swing.JFormattedTextField();
        HoraGD = new javax.swing.JFormattedTextField();

        jToggleButton1.setText("jToggleButton1");

        jLabel9.setText("jLabel9");

        jMenuItem1.setText("jMenuItem1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registar Game Designer");
        setResizable(false);

        jLabel2.setText("Nome:");

        jLabel3.setText("Morada:");

        jLabel4.setText("Num. Tel. :");

        jLabel5.setText("cache:");

        jLabel7.setText("NIF:");

        nomeCP.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                nomeCPComponentAdded(evt);
            }
        });

        moradaCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moradaCPActionPerformed(evt);
            }
        });

        jToggleButton2.setBackground(java.awt.Color.white);
        jToggleButton2.setForeground(new java.awt.Color(0, 0, 0));
        jToggleButton2.setText("Voltar");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton3.setBackground(java.awt.Color.white);
        jToggleButton3.setForeground(new java.awt.Color(0, 0, 0));
        jToggleButton3.setText("Guardar");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        cacheGD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#####.##"))));

        jLabel10.setText("Hora:");

        jLabel6.setText("Jogo:");

        jLabel1.setText("Escolha um dia:");

        panel.setBackground(java.awt.Color.white);
        panel.setForeground(java.awt.Color.black);

        nifCP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        HoraGD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(moradaCP, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jToggleButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addComponent(jogoGD, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jToggleButton2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel5)))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(numTelCP, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nifCP, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(HoraGD, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cacheGD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)))
                                        .addGap(21, 21, 21)
                                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(nomeCP, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(nomeCP, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(moradaCP, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(cacheGD, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HoraGD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jogoGD, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(numTelCP, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(nifCP, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButton2)
                            .addComponent(jToggleButton3))
                        .addGap(0, 25, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nomeCPComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_nomeCPComponentAdded
        
    }//GEN-LAST:event_nomeCPComponentAdded

    
    
    
    
    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        dispose();
 
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
       submeter();
       listagem.atualizar();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void moradaCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moradaCPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moradaCPActionPerformed

    private LocalDateTime getDate(){            //faz retorno da data selecionada
          
        String b = null;
        for (JCheckBox a : boxes){
            if (a.isSelected()){
             b = a.getName();
             
            }
                
        }
    

        String x = b;
      
        DateTimeFormatter fmt = new DateTimeFormatterBuilder()
        .appendPattern("dd/MM/yyyy")
        .optionalStart()
        .appendPattern("HH:mm")
        .optionalEnd()
        .parseDefaulting(ChronoField.HOUR_OF_DAY, Long.parseLong(HoraGD.getText()))
        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 00)
        .toFormatter();        
         LocalDateTime dateTime = LocalDateTime.parse(x , fmt);
        return dateTime;
    }
    
    public void getDesigners() {            //Enche o ArrayList dasigners com GameDesigners
       int a = 0;
       int b = game.getListaGameDesigners().size();
       if (b > 0){
       for (a = 0; a < b; a++){
           designers.add(game.getListaGameDesigners().getGameDesigner(a));
       }
    }
    }
            
            
            
    public int checkDate(){                                    ///Veriffica se não é repetido o Horário do GameDesigner
        int totalDias = game.getListaDias().size();
        int counterDias = 0;
        String date = null;
        String b = null;
        int s = 0;
        int exists = 0;
        String dataExistente = null;
        String dataCompletaExistente = null;
        String dataCompleta = null;
        getDesigners();
        if (designers.size() > 0){
        for (GameDesigner a : designers){
            dataExistente = a.getHoraFormatada();
             dataCompleta = a.getDateFormatted();
            

                for (JCheckBox selected : boxes){
                    if (selected.isSelected()){
                        dataCompletaExistente = selected.getText();
                        
                    }
                }
        
                
              if (dataExistente.equals(HoraGD.getText()) && dataCompleta.equals(dataCompletaExistente)){
                    
                    
                 exists++;
                 
                }else{
                    
                
                    
        
                
              }
                
            
                       
       
        
        
        
        
    
        
        }
        }
      
    
          return exists;
    }
       

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField HoraGD;
    private javax.swing.JFormattedTextField cacheGD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JTextField jogoGD;
    private javax.swing.JTextField moradaCP;
    private javax.swing.JFormattedTextField nifCP;
    private javax.swing.JTextField nomeCP;
    private javax.swing.JTextField numTelCP;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    public int checkBoxesSelected(){                
        int counter = 0;
        for (JCheckBox a : boxes){
            if (a.isSelected())
                counter++;
        }
        return counter;
        
    }



 private void setICon() {
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("IconImage_1.png")));
    }
public void submeter(){
    
    if(registoNovo()){
        
        
        if ( checkBoxesSelected() > 1 || checkBoxesSelected() == 0){
             JOptionPane.showMessageDialog(this, "Selecione pelo menos e apenas um Dia!"); 
             return;
        }
        if( checkDate() != 0){
            
            JOptionPane.showMessageDialog(this, "Já está registado um Game Designer para as " + HoraGD.getText());
            return;
        }
        if(nomeCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o seu Nome!");            
            nomeCP.requestFocus();
            return;
        }    
        if (!(Pattern.matches("^[a-zA-Z_ ]+$", nomeCP.getText()))) {
            JOptionPane.showMessageDialog(null, "Por favor introduza um nome válido");
            nomeCP.requestFocus();
            return;

    }
     
    if(moradaCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza uma Morada!");            
            moradaCP.requestFocus();
            return;
    }
    if(numTelCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza um numero de Telemovel!");            
            numTelCP.requestFocus();
            return;
    }
    if (!(Pattern.matches("^[0-9 +]+$", numTelCP.getText()))) {
        JOptionPane.showMessageDialog(null, "Por favor introduza um numero de telemóvel válido");
           numTelCP.requestFocus();
            return;
    }
    if(cacheGD.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza uma Funcao!");            
            cacheGD.requestFocus();
            return;
    }
    if(nifCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o seu NIF!");            
            nifCP.requestFocus();
            return;
    }
    
    if(nifCP.getText().length() > 9){
        JOptionPane.showMessageDialog(this, "Tem mais de 9 números no NIF");            
            nifCP.requestFocus();
            return;
    }
    
    if(HoraGD.getText().length() != 2){
           JOptionPane.showMessageDialog(this, "Introduza a hora de 01-23");            
            HoraGD.requestFocus();
            return;
    
    }

    if(jogoGD.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o jogo que o GameDesigner ira apresentar!");            
            jogoGD.requestFocus();
            return;
    }
    
        String nome = nomeCP.getText();
        String morada = moradaCP.getText();
        String numTel = numTelCP.getText();
        float cache = Float.parseFloat(cacheGD.getText());
        int nif =  Integer.parseInt(nifCP.getText());
        String jogo = jogoGD.getText();
     

        LocalDateTime dateTime = getDate();
        
       game.adicionarGameDesigner(new GameDesigner(nome,morada, numTel, nif ,cache,dateTime, jogo));
       dispose();
    }else{
        
       
        if ( checkBoxesSelected() > 1 || checkBoxesSelected() == 0){
             JOptionPane.showMessageDialog(this, "Selecione pelo menos e apenas um Dia!"); 
             return;
        }
        if( checkDate() != 0){
            
            JOptionPane.showMessageDialog(this, "Já está registado um Game Designer para as " + HoraGD.getText());
            return;
        }
        if(nomeCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o seu Nome!");            
            nomeCP.requestFocus();
            return;
        }    
        if (!(Pattern.matches("^[a-zA-Z_ ]+$", nomeCP.getText()))) {
            JOptionPane.showMessageDialog(null, "Por favor introduza um nome válido");
            nomeCP.requestFocus();
            return;

    }
     
    if(moradaCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza uma Morada!");            
            moradaCP.requestFocus();
            return;
    }
    if(numTelCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza um numero de Telemovel!");            
            numTelCP.requestFocus();
            return;
    }
    if (!(Pattern.matches("^[0-9 +]+$", numTelCP.getText()))) {
        JOptionPane.showMessageDialog(null, "Por favor introduza um numero de telemóvel válido");
           numTelCP.requestFocus();
            return;
    }
    if(cacheGD.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza uma Funcao!");            
            cacheGD.requestFocus();
            return;
    }
    if(nifCP.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o seu NIF!");            
            nifCP.requestFocus();
            return;
    }
    
    if(nifCP.getText().length() > 9){
        JOptionPane.showMessageDialog(this, "Tem mais de 9 números no NIF");            
            nifCP.requestFocus();
            return;
    }
    if(jogoGD.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Introduza o jogo que o GameDesigner ira apresentar!");            
            jogoGD.requestFocus();
            return;
    }
    if(HoraGD.getText().length() != 2){
           JOptionPane.showMessageDialog(this, "Introduza a hora de 01-23");            
            HoraGD.requestFocus();
            return;
    
    }
       LocalDateTime dateTime = getDate();
          
       
       gameDesigner.setHora(dateTime);
       gameDesigner.setNome(nomeCP.getText());
       gameDesigner.setMorada(moradaCP.getText());
       gameDesigner.setNumTel(numTelCP.getText());
       gameDesigner.setJogo(jogoGD.getText());
       gameDesigner.setCache(Float.parseFloat(cacheGD.getText()));
       gameDesigner.setNif((int) Long.parseLong(nifCP.getText()));

            dispose();
    }
}

}
