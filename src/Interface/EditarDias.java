/*
 * Copyright (C) 2017 vitor
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package Interface;

import gamefestival.Dia;
import gamefestival.GameFestival;
import java.awt.Color;
import static java.awt.Color.WHITE;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.ChronoField;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author vitor
 */
public class EditarDias extends javax.swing.JFrame {
    private GameFestival game;
    private AbstractTableModel modeloTabela;
    private Dia dia;
    /**
     * Creates new form EditarDias
     */
    public EditarDias(GameFestival game) {
        initComponents();
        this.game = game;
        setICon();
        getContentPane().setBackground(WHITE);

    
        this.modeloTabela = criarModeloTabela();
        tabDias.setModel(modeloTabela);
        JScrollPane enclosingScrollPane = (JScrollPane) tabDias.getParent().getParent();
        enclosingScrollPane.setBorder(BorderFactory.createEmptyBorder());
        
    
       AdicionarDia.setEnabled(false);
       
    }

                public int getRowCount() {
                //Retorna o número de linhas que a tabela deverá ter
                return game.getListaDias().size();
            }
    
      private AbstractTableModel criarModeloTabela() {   
        String[] nomeColunas = {"Ano", "Mês","Dia", "Lotação"};
        
        return new AbstractTableModel() {     
            @Override
            public String getColumnName(int column) {
                return nomeColunas[column];
            }
           
            
            @Override
            public int getRowCount() {
                //Retorna o número de linhas que a tabela deverá ter
                return game.getListaDias().size();
            }
            
            @Override
            public int getColumnCount() {
                //Retorna o número de colunas que a tabela deverá ter
                return nomeColunas.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
          
                switch (columnIndex) {
                    case 0: 
                        return game.getListaDias().getDia(rowIndex).getAno();
                        
                    case 1:
                        return game.getListaDias().getDia(rowIndex).getMes();
                    case 2:
                        return game.getListaDias().getDia(rowIndex).getDiaDoMes();
                    case 3:
                        return game.getListaDias().getDia(rowIndex).getCapMax();
               
                    default:
                        return "";
                }                              
            }            
        };
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabDias = new javax.swing.JTable();
        AdicionarDia = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        data = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        lotacao = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dias de Festival");
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        tabDias.setBackground(java.awt.Color.white);
        tabDias.setForeground(new java.awt.Color(0, 0, 0));
        tabDias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabDias.setToolTipText("");
        tabDias.setAlignmentX(0.0F);
        tabDias.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabDias.setFillsViewportHeight(true);
        tabDias.setGridColor(java.awt.Color.black);
        tabDias.setPreferredSize(new java.awt.Dimension(369, 64));
        tabDias.setSelectionBackground(new java.awt.Color(187, 187, 187));
        tabDias.setSelectionForeground(java.awt.Color.black);
        jScrollPane1.setViewportView(tabDias);

        AdicionarDia.setBackground(java.awt.Color.white);
        AdicionarDia.setForeground(java.awt.Color.black);
        AdicionarDia.setText("Adicionar Dia");
        AdicionarDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarDiaActionPerformed(evt);
            }
        });

        jToggleButton1.setBackground(java.awt.Color.white);
        jToggleButton1.setForeground(java.awt.Color.black);
        jToggleButton1.setText("Apagar Dia");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(java.awt.Color.white);
        jButton2.setForeground(java.awt.Color.black);
        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Lotação Máxima");

        data.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dataInputMethodTextChanged(evt);
            }
        });
        data.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataPropertyChange(evt);
            }
        });

        jLabel3.setText("Escolher Data");

        lotacao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AdicionarDia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lotacao, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AdicionarDia, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotacao, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AdicionarDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarDiaActionPerformed
        submeter();
        atualizar();
    }//GEN-LAST:event_AdicionarDiaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            dispose();
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    
    }//GEN-LAST:event_formFocusGained

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        apagar();
        atualizar();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void dataInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dataInputMethodTextChanged
        
    }//GEN-LAST:event_dataInputMethodTextChanged

    private void dataPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataPropertyChange
        AdicionarDia.setEnabled(true);
    }//GEN-LAST:event_dataPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarDia;
    private com.toedter.calendar.JDateChooser data;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JFormattedTextField lotacao;
    private javax.swing.JTable tabDias;
    // End of variables declaration//GEN-END:variables

    
    private void apagar(){                                  //apaga um dia
                int rowIndex = tabDias.getSelectedRow();
        //Se nenhum registo selecionado, nao é possivel editar
        if (rowIndex == -1) return;
        
        
        
        
   
        gamefestival.Dia dia = game.getListaDias().getDia(tabDias.getSelectedRow());
          if((game.getListaDias().getDia(tabDias.getSelectedRow())) instanceof Dia){
              game.removerUmDia(game.getListaDias().getDia(tabDias.getSelectedRow()));
             
          }
    }
       
      
    
    private void submeter() {
     

        if ( lotacao.getText().isEmpty()){
               JOptionPane.showMessageDialog(this, "Introduza os dados corretamente P.F.");            
           
            return;
        }else{

            
            
            
            
            
        Date xa = data.getDate();
        String x = DateFormat.getDateInstance().format(xa);
      
        DateTimeFormatter fmt = new DateTimeFormatterBuilder()
        .appendPattern("dd/MMM/yyyy")
        .optionalStart()
        .appendPattern("HH:mm")
        .optionalEnd()
        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
        .toFormatter();        
        LocalDateTime dateTime = LocalDateTime.parse(x , fmt);
        int lot = Integer.parseInt(lotacao.getText());
        int counter = 0;
        int exists = 0;
        int max = game.getListaDias().size();
        for(counter = 0; counter < max; counter++){
            if (dateTime.equals(game.getListaDias().getDia(counter).getDia())){
                exists++;
            }
            
        }
        
        if (exists == 0){                           //verifica o dia é repetido.
        Dia dia = new Dia();
        dia.setDia(dateTime);
        dia.setCapMax(lot);
        game.adicionarDia(dia);
        
        }else{
          JOptionPane.showMessageDialog(this, "Este dia já foi adicionado");            
           
            return;
        }
        }
    }
public void atualizar() {    
        //Informa o modelo que foram efetuadas alteracoes, o modelo informa a tabela e os dados são redesenhados
        modeloTabela.fireTableDataChanged();
    }      
      private void setICon() {
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("IconImage_1.png")));
    }


}
